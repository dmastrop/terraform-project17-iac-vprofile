# Github workflow for terraform IaaC with github actions
name: "Vprofile IAC"
on: 
  push:
    branches:
      - main
      - stage
    paths:
      - terraform/**
      # any changes in this folder and if main or stage branch and if push then the workflow will get triggered
  pull_request:
    branches:
      - main
      # when this pull request gets triggered this will trigger the workflow
    paths:
      - terraform/**

env:
  # Credentials for deployment to AWS with IAM Admin user
  # terraform needs these credentials to connect to AWS
  # secrets.* values have been added to github secrets for this repository.
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # S3 bucket for the Terraform state
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_REGION: us-east-1
  EKS_CLUSTER: project17-eks-vprofile

jobs: 
  terraform:
    # name of the job
    name: "Apply terraform code changes"
    # runner is on github. Use ubuntu-latest for maven, java, and nodejs
    runs-on: ubuntu-latest
    # the runner will be on an ubuntu-latest container
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
        # the working directory will be the terraform folder in the github repo below that is checked out. 
        # The terraform directoy is at the same level as .github, and terraform directory has all the .tf files.
    
    #steps
    steps:
      - name: Checkout the source code. 
      # This is essentially the terraform-project17-iac-vprofile github repository
      # The working dirctory is ./terraform so the steps below for terraform can be executed 
        uses: actions/checkout@v4
        # https://github.com/marketplace/actions/checkout

      - name: Setup Terraform with specified version on the runner.  
      # Runners do not come pre-installed with terraform
        uses: hashicorp/setup-terraform@v2
        # https://github.com/marketplace/actions/hashicorp-setup-terraform
        #with:
          #terraform_version: 1.6.3
          #terraform_version: 1.6.3
          # comment this out to use the latest version of terraform.
      
      - name: Terraform init
        id: init
        #run: terraform init -upgrade -backend-config="bucket=$BUCKET_TF_STATE"
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"
        # BUCKET_TF_STATE is specified in env above.  The state will be stored in the S3 bucket.

      - name: Terraform format
        id: fmt
        run: terraform fmt -check
        # the format will be checked and will return nonzero error code if the format is incorrect and the workflow will
        # be failed!!  Zero exit code is pass.

      - name: Terraform validate
        id: validate
        run: terraform validate
        # nonzero exit code is a failure and job will fail and exit

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false -out=planfile
        # no color output, no passing of parameters to other process, store in "planfile"
        # the outfile will help in debugging
        # Saves the plan to a file that can be passed to the Terraform apply command to execute the planned changes. 
        # Any filename is allowed, but the recommended naming convention is to name it “tfplan.” Do not use the “.tf” suffix, 
        # as this will lead Terraform to interpret the file as a configuration script and will fail
        continue-on-error: true
        # this is to pass to next step for the true error checking

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        # any nonzero failure code is fine
        # container will be killed and job will fail



